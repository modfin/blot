// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)


func (q *Queries) AddFragment(
	ctx context.Context,
	label, name, content, embeddingModel,embeddingVector string,
) (Fragment, error) {

	const addFragment = `
INSERT INTO fragments (label, name, content, embedding_model, embedding_vector)
VALUES (?, ?, ?, ?, ?) 
ON CONFLICT (label, name) DO 
	UPDATE 
    SET content = excluded.content, 
		embedding_model = excluded.embedding_model,
		embedding_vector = excluded.embedding_vector
RETURNING id, label, name, content, embedding_model, embedding_vector, created_at
`


	row := q.db.QueryRowContext(ctx, addFragment,
		label,
		name,
		content,
		embeddingModel,
		embeddingVector,
	)
	var i Fragment
	err := row.Scan(
		&i.ID,
		&i.Label,
		&i.Name,
		&i.Content,
		&i.EmbeddingModel,
		&i.EmbeddingVector,
		&i.CreatedAt,
	)
	return i, err
}



func (q *Queries) Dirty(ctx context.Context, label string, name string, content string) (bool, error) {

	const dirty = `
	SELECT count(*) = 0
	FROM fragments
	WHERE label = ? AND name = ? AND content = ?
`

	row := q.db.QueryRowContext(ctx, dirty,
		label,
		name,
		content,
	)
	var i bool
	if err := row.Scan(&i); err != nil {
		return false, err
	}
	return i, nil

}





func (q *Queries) KNN(ctx context.Context, vector string, limit int64, offset int64) ([]Fragment, error) {

	const kNN = `
SELECT id, label, name, content, embedding_model, embedding_vector, created_at
FROM fragments
ORDER BY vec_dist(embedding_vector, ?)
LIMIT ? OFFSET ?
`

	rows, err := q.db.QueryContext(ctx, kNN,
		vector,
		limit,
		offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fragment
	for rows.Next() {
		var i Fragment
		if err := rows.Scan(
			&i.ID,
			&i.Label,
			&i.Name,
			&i.Content,
			&i.EmbeddingModel,
			&i.EmbeddingVector,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}


func (q *Queries) ListFragments(ctx context.Context) ([]Fragment, error) {

	const listFragments = `
SELECT id, label, name, content, embedding_model, embedding_vector, created_at
FROM fragments
ORDER BY id
`


	rows, err := q.db.QueryContext(ctx, listFragments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fragment
	for rows.Next() {
		var i Fragment
		if err := rows.Scan(
			&i.ID,
			&i.Label,
			&i.Name,
			&i.Content,
			&i.EmbeddingModel,
			&i.EmbeddingVector,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
